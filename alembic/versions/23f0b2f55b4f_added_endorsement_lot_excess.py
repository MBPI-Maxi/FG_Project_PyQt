"""added endorsement lot excess

Revision ID: 23f0b2f55b4f
Revises: 33cbde1cf432
Create Date: 2025-07-08 15:06:43.119712

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '23f0b2f55b4f'
down_revision: Union[str, Sequence[str], None] = '33cbde1cf432'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tbl_endorsement_lot_excess',
    sa.Column('t_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('t_lotnumber', sa.String(length=10), nullable=False),
    sa.Column('t_excess_amount', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['t_lotnumber'], ['tbl_endorsement_t2.t_lotnumbersingle'], ),
    sa.PrimaryKeyConstraint('t_id'),
    sa.UniqueConstraint('t_lotnumber')
    )
    op.drop_table('endorsement_t2')
    op.drop_table('endorsement_t1')
    op.add_column('tbl_endorsement_t2', sa.Column('t_excess_amount', sa.Float(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('tbl_endorsement_t2', 't_excess_amount')
    op.create_table('endorsement_t1',
    sa.Column('t_id', sa.INTEGER(), server_default=sa.text("nextval('endorsement_t1_t_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('t_refno', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('t_date_endorsed', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('t_category', postgresql.ENUM('MB', 'DC', name='categoryenum'), autoincrement=False, nullable=False),
    sa.Column('t_prodcode', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('t_lotnumberwhole', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('t_qtykg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('t_wtlot', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('t_status', postgresql.ENUM('PASSED', 'FAILED', name='statusenum'), autoincrement=False, nullable=False),
    sa.Column('t_endorsed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('has_excess', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('t_id', name='endorsement_t1_pkey'),
    sa.UniqueConstraint('t_refno', name='endorsement_t1_t_refno_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('endorsement_t2',
    sa.Column('t2_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('t_refno', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('t_lotnumbersingle', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('t_qty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['t_refno'], ['endorsement_t1.t_refno'], name=op.f('endorsement_t2_t_refno_fkey')),
    sa.PrimaryKeyConstraint('t2_id', name=op.f('endorsement_t2_pkey'))
    )
    op.drop_table('tbl_endorsement_lot_excess')
    # ### end Alembic commands ###
